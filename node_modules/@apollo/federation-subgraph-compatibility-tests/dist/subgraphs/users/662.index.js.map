{"version":3,"file":"662.index.js","mappings":";;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;AClEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":[".././node_modules/@apollo/server/dist/esm/plugin/inlineTrace/index.js",".././node_modules/@apollo/server/dist/esm/plugin/schemaIsSubgraph.js"],"sourcesContent":["import { Trace } from '@apollo/usage-reporting-protobuf';\nimport { TraceTreeBuilder } from '../traceTreeBuilder.js';\nimport { internalPlugin } from '../../internalPlugin.js';\nimport { schemaIsSubgraph } from '../schemaIsSubgraph.js';\nexport function ApolloServerPluginInlineTrace(options = Object.create(null)) {\n    let enabled = options.__onlyIfSchemaIsSubgraph ? null : true;\n    return internalPlugin({\n        __internal_plugin_id__: 'InlineTrace',\n        __is_disabled_plugin__: false,\n        async serverWillStart({ schema, logger }) {\n            if (enabled === null) {\n                enabled = schemaIsSubgraph(schema);\n                if (enabled) {\n                    logger.info('Enabling inline tracing for this subgraph. To disable, use ' +\n                        'ApolloServerPluginInlineTraceDisabled.');\n                }\n            }\n        },\n        async requestDidStart({ request: { http }, metrics }) {\n            if (!enabled) {\n                return;\n            }\n            const treeBuilder = new TraceTreeBuilder({\n                maskedBy: 'ApolloServerPluginInlineTrace',\n                sendErrors: options.includeErrors,\n            });\n            if (http?.headers.get('apollo-federation-include-trace') !== 'ftv1') {\n                return;\n            }\n            if (metrics.captureTraces === false) {\n                return;\n            }\n            metrics.captureTraces = true;\n            treeBuilder.startTiming();\n            return {\n                async executionDidStart() {\n                    return {\n                        willResolveField({ info }) {\n                            return treeBuilder.willResolveField(info);\n                        },\n                    };\n                },\n                async didEncounterErrors({ errors }) {\n                    treeBuilder.didEncounterErrors(errors);\n                },\n                async willSendResponse({ response }) {\n                    treeBuilder.stopTiming();\n                    if (response.body.kind === 'incremental') {\n                        return;\n                    }\n                    if (metrics.queryPlanTrace) {\n                        treeBuilder.trace.queryPlan = metrics.queryPlanTrace;\n                    }\n                    const encodedUint8Array = Trace.encode(treeBuilder.trace).finish();\n                    const encodedBuffer = Buffer.from(encodedUint8Array, encodedUint8Array.byteOffset, encodedUint8Array.byteLength);\n                    const extensions = response.body.singleResult.extensions ||\n                        (response.body.singleResult.extensions = Object.create(null));\n                    if (typeof extensions.ftv1 !== 'undefined') {\n                        throw new Error('The `ftv1` extension was already present.');\n                    }\n                    extensions.ftv1 = encodedBuffer.toString('base64');\n                },\n            };\n        },\n    });\n}\n//# sourceMappingURL=index.js.map","import { isObjectType, isScalarType, isNonNullType, } from 'graphql';\nexport function schemaIsSubgraph(schema) {\n    const serviceType = schema.getType('_Service');\n    if (!isObjectType(serviceType)) {\n        return false;\n    }\n    const sdlField = serviceType.getFields().sdl;\n    if (!sdlField) {\n        return false;\n    }\n    let sdlFieldType = sdlField.type;\n    if (isNonNullType(sdlFieldType)) {\n        sdlFieldType = sdlFieldType.ofType;\n    }\n    if (!isScalarType(sdlFieldType)) {\n        return false;\n    }\n    return sdlFieldType.name == 'String';\n}\n//# sourceMappingURL=schemaIsSubgraph.js.map"],"names":[],"sourceRoot":""}