"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.writeableDebugStream = exports.logResults = exports.logWithTimestamp = exports.infoLog = void 0;
const debug_1 = __importDefault(require("debug"));
const stream_1 = require("stream");
const testRunner_1 = require("../testRunner");
exports.infoLog = (0, debug_1.default)('info');
/**
 * Log message with a timestamp.
 */
function logWithTimestamp(message) {
    (0, exports.infoLog)(new Date().toJSON(), message);
}
exports.logWithTimestamp = logWithTimestamp;
/**
 * Log compatibility test results to console.
 */
function logResults(testResults) {
    console.log('*************\nFederation v1 compatibility\n*************');
    testRunner_1.TESTS.forEach((test) => {
        if (test.fedVersion === 1) {
            console.log(test.column, testResults[test.assertion]?.success
                ? 'PASS'
                : test.required
                    ? 'FAIL'
                    : 'WARNING');
        }
    });
    console.log('\n*************\nFederation v2 compatibility\n*************');
    testRunner_1.TESTS.forEach((test) => {
        if (test.fedVersion === 2) {
            console.log(test.column, testResults[test.assertion]?.success
                ? 'PASS'
                : test.required
                    ? 'FAIL'
                    : 'WARNING');
        }
    });
}
exports.logResults = logResults;
/**
 * Writable debug stream that uses Debugger to indicate whether message should be logged or not.
 */
function writeableDebugStream(debug) {
    return new stream_1.Writable({
        write(chunk, _encoding, next) {
            debug(chunk.toString());
            next();
        },
    });
}
exports.writeableDebugStream = writeableDebugStream;
//# sourceMappingURL=logging.js.map