"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.composeSupergraph = exports.composeDevSupergraph = void 0;
const execa_1 = __importDefault(require("execa"));
const debug_1 = __importDefault(require("debug"));
const client_1 = require("./utils/client");
const logging_1 = require("./utils/logging");
const path_1 = require("./utils/path");
const path_2 = require("path");
const promises_1 = require("fs/promises");
const fs_1 = require("fs");
const COMPOSITION_VERSION = process.env['APOLLO_ROVER_DEV_COMPOSITION_VERSION'] ?? '2.7.1';
const ROUTER_VERSION = process.env['APOLLO_ROVER_DEV_ROUTER_VERSION'] ?? '1.39.0';
const roverDebug = (0, debug_1.default)('rover');
/**
 * Composes supergraph using rover dev command and introspection.
 *
 * @param productsUrl products schema URL
 */
async function composeDevSupergraph(productsUrl, productsSchema) {
    (0, logging_1.logWithTimestamp)('composing supergraph...');
    roverDebug(`\n***********************\nComposing supergraph...\n***********************\n\n`);
    // composing supergraph
    //   cannot use supergraph.config.js as we need to run rover dev sequentially for each subgraph
    //   this is a workaround to https://github.com/apollographql/rover/issues/1258
    // TODO cleanup once multiple subgraphs could be specified with single rover dev command
    await composeDevSubgraph('products', productsUrl, productsSchema);
    await composeDevSubgraph('users', 'http://localhost:4002', (0, path_2.resolve)(__dirname, 'subgraphs', 'users', 'users.graphql'));
    await composeDevSubgraph('inventory', 'http://localhost:4003', (0, path_2.resolve)(__dirname, 'subgraphs', 'inventory', 'inventory.graphql'));
    const started = await (0, client_1.healthcheckRouter)();
    if (started) {
        roverDebug(`\n***********************\nSupergraph composed...\n***********************\n\n`);
        return true;
    }
    else {
        return false;
    }
}
exports.composeDevSupergraph = composeDevSupergraph;
async function composeDevSubgraph(subgraphName, subgraphUrl, schemaFile) {
    roverDebug(`Composing supergraph - loading ${subgraphName} schema`);
    const started = await (0, client_1.healthcheck)(subgraphName, subgraphUrl);
    if (started) {
        const routerConfigPath = (0, path_2.resolve)(__dirname, '../router.yaml');
        const params = [
            'start',
            'rover',
            '--name',
            `rover-${subgraphName}`,
            '--',
            'dev',
            '--name',
            subgraphName,
            '--url',
            subgraphUrl,
            '--router-config',
            routerConfigPath,
        ];
        if (schemaFile) {
            params.push('--schema', schemaFile);
        }
        const proc = (0, execa_1.default)('pm2', params, {
            env: {
                APOLLO_ROVER_DEV_COMPOSITION_VERSION: COMPOSITION_VERSION,
                APOLLO_ROVER_DEV_ROUTER_VERSION: ROUTER_VERSION,
            },
        });
        proc.stdout.pipe((0, logging_1.writeableDebugStream)(roverDebug));
        proc.stderr.pipe((0, logging_1.writeableDebugStream)(roverDebug));
        await proc;
        if (proc.exitCode !== 0) {
            throw new Error(`Failed to compose supergraph - failed to load ${subgraphName} schema`);
        }
    }
    else {
        throw new Error(`${subgraphName} failed to start`);
    }
}
async function composeSupergraph(schemaFile, graphQLEndpoint = '', port = '4001') {
    (0, logging_1.logWithTimestamp)('composing supergraph...');
    roverDebug(`\n***********************\nComposing supergraph...\n***********************\n\n`);
    // generate supergraph config
    const template = await (0, promises_1.readFile)((0, path_2.resolve)(__dirname, '../supergraph-config.yaml.template'), 'utf-8');
    const supergraphConfig = template
        .replace('${COMPOSITION_VERSION}', COMPOSITION_VERSION)
        .replaceAll('${DIST_DIR}', (0, path_1.normalizePath)((0, path_2.resolve)(__dirname)))
        .replace('${PORT}', port)
        .replace('${GRAPHQL_PATH}', graphQLEndpoint)
        .replace('${SCHEMA_FILE}', schemaFile);
    await (0, promises_1.writeFile)('supergraph-config.yaml', supergraphConfig);
    // compose supergraph
    const composeProcess = (0, execa_1.default)('npx', [
        '@apollo/rover',
        'supergraph',
        'compose',
        '--config',
        'supergraph-config.yaml',
    ], {
        env: {
            APOLLO_ELV2_LICENSE: 'accept',
        },
    });
    composeProcess.stdout.pipe((0, fs_1.createWriteStream)('supergraph.graphql'));
    composeProcess.stderr.pipe((0, logging_1.writeableDebugStream)(roverDebug));
    await composeProcess;
    if (composeProcess.exitCode !== 0) {
        throw new Error(`Failed to compose supergraph`);
    }
    roverDebug(`\n***********************\nSupergraph composed...\n***********************\n\n`);
}
exports.composeSupergraph = composeSupergraph;
//# sourceMappingURL=composeSupergraph.js.map